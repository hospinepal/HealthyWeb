' Gambas module file

Private Function MultiGeneralProfile(encidList As String[]) As String[]

  Dim asx As New String[0]
  Dim encid As String
  Dim xx As String

  With asx
    .Add("General Information")
    For Each encid In encidList
      xx = "Patient No: " & modPatient.GetPatientNoByEnc(encid) & gb.NewLine
      xx = xx & "Patient Name: " & modPatient.GetPatientNameByEnc(encid, modDatabase.$syConn) & gb.NewLine
      xx = xx & "Address: " & modPatient.GetPatientAddressByEnc(encid, modDatabase.$syConn) & gb.NewLine
      xx = xx & "Gender: " & modPatient.GetPatientSex(encid, modDatabase.$syConn) & gb.NewLine
      xx = xx & "Age on Registration: " & modPatient.GetPatientAgeString(encid, modPatient.GetRecordDate(encid)) & gb.NewLine
      xx = xx & "Ethnicity: " & modPatient.GetPatientEthnicity(encid) & gb.NewLine
      xx = xx & "Consultant: " & modPatient.GetAttendingConsultant(encid) & gb.NewLine
      xx = xx & "Visit Mode: " & modPatient.GetPatVisitType(encid) & gb.NewLine
      xx = xx & "File Number: " & modPatient.GetPatientFileByEnc(encid)
      .Add(xx)
    Next
  End With
  Return asx

End

Private Function MultiAddCourseOfTreatment(encidList As String[]) As String[]

  Dim asx As New String[0]
  Dim res As Result
  Dim res1 As Result
  Dim xx As String
  Dim xcom As String
  Dim encid As String

  With asx
    .Add("Course of Treatment")
    For Each encid In encidList
      xx = ""
      res = modDatabase.$syConn.Exec("select fldhead,fldtime,fldcomment from tblpatientdate where fldencounterval=&1", encid)
      If res.Available Then
        For Each res
          xcom = ""
          If res["fldcomment"] Then
            xcom = " (" & res["fldcomment"] & ")"
          Endif
          xx = xx & " Date: " & modReportVar.GetDateTimeReport(res["fldtime"], gb.GeneralDate) & "::" & res["fldhead"] & xcom & gb.NewLine
        Next
      Endif

      res1 = modDatabase.$syConn.Exec("select fldreferto,fldfollowdate from tblencounter where fldencounterval=&1", encid)
      If res.Available Then
        If res["fldreferto"] Then
          If res["fldfollowdate"] Then
            xx = xx & "Refer To: " & res["fldreferto"] & " [" & modReportVar.GetDateTimeReport(res["fldfollowdate"], gb.GeneralDate) & " ]"
          Else
            xx = xx & "Refer To: " & res["fldreferto"]
          Endif
        Else
          If res["fldfollowdate"] Then
            xx = xx & "Follow-up: " & modReportVar.GetDateTimeReport(res["fldfollowdate"], gb.GeneralDate)
          Endif
        Endif
      Endif

      .Add(xx)
    Next
  End With
  Return asx

End

Private Function MultiAddChiefComplaints(encidList As String[]) As String[]

  Dim asx As New String[0]
  Dim encid As String
  Dim xstr As String

  With asx
    .Add("Chief Complaints")
    For Each encid In encidList
      xstr = modPatPatho.ShowSelectedHistory(encid, "General Complaints")
      xstr = xstr & gb.NewLine & modPatPatho.ShowSelectedHistory(encid, "General Complaints")
      .Add(xstr)
    Next
  End With
  Return asx

End

Private Function MultiAddPresentingComplaints(encidList As String[]) As String[]

  Dim asx As New String[0]
  Dim encid As String

  With asx
    .Add("Presenting Complaints")
    For Each encid In encidList
      .Add(modPatReports.GetPatientPresentingSymptomReport(encid).Join(gb.NewLine))
    Next
  End With
  Return asx

End

Private Function MultiAddGenComplaints(encidList As String[]) As String[]

  Dim asx As New String[0]
  Dim encid As String

  With asx
    .Add("General Complaints")
    For Each encid In encidList
      .Add(modPatPatho.ShowSelectedHistory(encid, "General Complaints"))
    Next
  End With
  Return asx

End

Private Function MultiAddCauseofAdmission(encidList As String[]) As String[]

  Dim asx As New String[0]
  Dim encid As String

  With asx
    .Add("Cause of Admission")
    For Each encid In encidList
      .Add(modPatPatho.ShowSelectedHistory(encid, "Cause of Admission"))
    Next
  End With
  Return asx

End

Public Function MultiAddSelectedHistory(encidList As String[], sType As String) As String[]

  Dim asx As New String[0]
  Dim encid As String

  With asx
    .Add(sType)
    For Each encid In encidList
      .Add(modPatPatho.ShowSelectedHistory(encid, sType))
    Next
  End With
  Return asx

End

Public Function MultiAddSelectedDischarge(encidList As String[], sType As String) As String[]

  Dim asx As New String[0]
  Dim encid As String

  With asx
    .Add(sType)
    For Each encid In encidList
      .Add(modPatPatho.ShowSelectedNotes(encid, sType))
    Next
  End With
  Return asx

End

Private Function MultiAddHistoryOfIllness(encidList As String[]) As String[]

  Dim asx As New String[0]
  Dim encid As String

  With asx
    .Add("History of Illness")
    For Each encid In encidList
      .Add(modPatPatho.ShowSelectedHistory(encid, "History of Illness"))
    Next
  End With
  Return asx

End

''----------------------- For backward compatibility -------------------
Private Function MultiAddPastHistory(encidList As String[]) As String[]

  Dim asx As New String[0]
  Dim encid As String

  With asx
    .Add("Past History")
    For Each encid In encidList
      .Add(modPatPatho.ShowSelectedHistory(encid, "Past History"))
    Next
  End With
  Return asx

End

Private Function MultiAddTreatmentHistory(encidList As String[]) As String[]

  Dim asx As New String[0]
  Dim encid As String

  With asx
    .Add("Treatment History")
    For Each encid In encidList
      .Add(modPatPatho.ShowSelectedHistory(encid, "Treatment History"))
    Next
  End With
  Return asx

End

Private Function MultiAddMedicatHistory(encidList As String[]) As String[]

  Dim asx As New String[0]
  Dim encid As String

  With asx
    .Add("Medication History")
    For Each encid In encidList
      .Add(modPatPatho.ShowSelectedHistory(encid, "Medication History"))
    Next
  End With
  Return asx

End

Private Function MultiAddPersonalHistory(encidList As String[]) As String[]

  Dim asx As New String[0]
  Dim encid As String

  With asx
    .Add("Personal History")
    For Each encid In encidList
      .Add(modPatPatho.ShowSelectedHistory(encid, "Personal History"))
    Next
  End With
  Return asx

End

Private Function MultiAddSurgicalHistory(encidList As String[]) As String[]

  Dim asx As New String[0]
  Dim encid As String

  With asx
    .Add("Surgical History")
    For Each encid In encidList
      .Add(modPatPatho.ShowSelectedHistory(encid, "Surgical History"))
    Next
  End With
  Return asx

End

Private Function MultiAddOccupationalHistory(encidList As String[]) As String[]

  Dim asx As New String[0]
  Dim encid As String

  With asx
    .Add("Occupational History")
    For Each encid In encidList
      .Add(modPatPatho.ShowSelectedHistory(encid, "Occupational History"))
    Next
  End With
  Return asx

End

Private Function MultiAddSocialHistory(encidList As String[]) As String[]

  Dim asx As New String[0]
  Dim encid As String

  With asx
    .Add("Social History")
    For Each encid In encidList
      .Add(modPatPatho.ShowSelectedHistory(encid, "Social History"))
    Next
  End With
  Return asx

End

Private Function MultiAddFamilyHistory(encidList As String[]) As String[]

  Dim asx As New String[0]
  Dim encid As String

  With asx
    .Add("Family History")
    For Each encid In encidList
      .Add(modPatPatho.ShowSelectedHistory(encid, "Family History"))
    Next
  End With
  Return asx

End
''----------------- end backward compatibility --------------------

Private Function MultiAddProvisionalDiagnosis(encidList As String[]) As String[]

  Dim asx As New String[0]
  Dim encid As String

  With asx
    .Add("Provisional Diagnosis")
    For Each encid In encidList
      .Add(modPatient.PatientFindingList(encid, "Provisional Diagnosis").Join(gb.newline))
    Next
  End With
  Return asx

End

Private Function MultiAddFinalDiagnosis(encidList As String[]) As String[]

  Dim asx As New String[0]
  Dim encid As String

  With asx
    .Add("Final Diagnosis")
    For Each encid In encidList
      .Add(modPatient.PatientFindingList(encid, "Final Diagnosis").Join(gb.newline))
    Next
  End With
  Return asx

End

''------------------ exam type ---------------------
Private Function MultiAddClinFindingsAll(encidList As String[]) As String[]

  Dim asx As New String[0]
  Dim encid As String

  With asx
    .Add("Clinical Findings")
    For Each encid In encidList
      .Add(modPatReports.AddClinFindingsAll(encid))
    Next
  End With
  Return asx

End

Private Function MultiAddPhysicianFindings(encidList As String[]) As String[]

  Dim asx As New String[0]
  Dim encid As String

  With asx
    .Add("Physician Examinations")
    For Each encid In encidList
      .Add(modPatReports.AddPhysicianFindings(encid))
    Next
  End With
  Return asx

End

Private Function MultiAddEssentialFindings(encidList As String[]) As String[]

  Dim asx As New String[0]
  Dim encid As String

  With asx
    .Add("Essential Examinations")
    For Each encid In encidList
      .Add(modPatReports.AddEssentialFindings(encid))
    Next
  End With
  Return asx

End

Private Function MultiAddTriageFindings(encidList As String[]) As String[]

  Dim asx As New String[0]
  Dim encid As String

  With asx
    .Add("Triage Examinations")
    For Each encid In encidList
      .Add(modPatReports.AddTriageFindings(encid))
    Next
  End With
  Return asx

End

Private Function MultiAddDischargeFindings(encidList As String[]) As String[]

  Dim asx As New String[0]
  Dim encid As String

  With asx
    .Add("Discharge Examinations")
    For Each encid In encidList
      .Add(modPatReports.AddDischargeFindings(encid))
    Next
  End With
  Return asx

End

Public Function MultiAddNursingFindings(encidList As String[]) As String[]

  Dim asx As New String[0]
  Dim encid As String

  With asx
    .Add("Nursing Examinations")
    For Each encid In encidList
      .Add(modPatReports.AddNursingFindings(encid))
    Next
  End With
  Return asx

End

Public Function MultiAddPhysicianStructured(encidList As String[]) As String[]

  Dim asx As New String[0]
  Dim encid As String

  With asx
    .Add("hysician Examinations")
    For Each encid In encidList
      .Add(modPatReports.AddPhysicianStructured(encid))
    Next
  End With
  Return asx

End

Public Function MultiAddDepartmentStructured(encidList As String[]) As String[]

  Dim asx As New String[0]
  Dim encid As String

  With asx
    .Add("Departmental Examinations")
    For Each encid In encidList
      .Add(modPatReports.AddDepartmentStructured(encid))
    Next
  End With
  Return asx

End

''----------------- Note -----------------
Private Function MultiAddConsultationAll(encidList As String[]) As String[]

  Dim asx As New String[0]
  Dim encid As String

  With asx
    .Add("Consultations")
    For Each encid In encidList
      .Add(modPatient.GetPatientCOnsultList(encid).Join(gb.NewLine))
    Next
  End With
  Return asx

End

Private Function MultiAddBedTransition(encidList As String[]) As String[]

  Dim asx As New String[0]
  Dim encid As String

  With asx
    .Add("Bed Transitions")
    For Each encid In encidList
      .Add(modPatPatho.GetPatientTransition(encid).Join(gb.NewLine))
    Next
  End With
  Return asx

End

Private Function MultiAddEquipmentsUsed(encidList As String[]) As String[]

  Dim asx As New String[0]
  Dim encid As String

  With asx
    .Add("Equipments Used")
    For Each encid In encidList
      .Add(modPatPatho.GetPatientEquipmentUse(encid).Join(gb.NewLine))
    Next
  End With
  Return asx

End

Private Function MultiAddEventProfile(encidList As String[]) As String[]

  Dim asx As New String[0]
  Dim encid As String

  With asx
    .Add("Event Timings")
    For Each encid In encidList
      .Add(modPatPatho.GetPatientEventProfile(encid, "Events").Join(gb.NewLine))
    Next
  End With
  Return asx

End

Private Function MultiAddDevicesUsed(encidList As String[]) As String[]

  Dim asx As New String[0]
  Dim encid As String

  With asx
    .Add("Devices Used")
    For Each encid In encidList
      .Add(modPatPatho.GetPatientEventProfile(encid, "Devices").Join(gb.NewLine))
    Next
  End With
  Return asx

End

Private Function MultiAddDrugAllergy(encidList As String[]) As String[]

  Dim asx As New String[0]
  Dim encid As String

  With asx
    .Add("Drug Allergy")
    For Each encid In encidList
      .Add(modPatient.PatientFindingList(encid, "Allergic Drugs").Join(gb.NewLine))
    Next
  End With
  Return asx

End

Private Function MultiAddProminientSymptoms(encidList As String[]) As String[]

  Dim asx As New String[0]
  Dim encid As String

  With asx
    .Add("Prominent Symptoms")
    For Each encid In encidList
      .Add(modPatReports.GetPatientSymptomReport(encid).Join(gb.NewLine))
    Next
  End With
  Return asx

End

Private Function MultiAddPatDemographics(encidList As String[]) As String[]

  Dim asx As New String[0]
  Dim encid As String

  With asx
    .Add("Demographics")
    For Each encid In encidList
      .Add(modPatReports.GetPatientDemographicReport(encid).Join(gb.NewLine))
    Next
  End With
  Return asx

End

Private Function MultiAddMajorProcedures(encidList As String[]) As String[]

  Dim asx As New String[0]
  Dim encid As String

  With asx
    .Add("Major Procedures")
    For Each encid In encidList
      .Add(modPatPatho.PatSelectProcedureString(encid, "Procedures", "Done"))
    Next
  End With
  Return asx

End

Private Function MultiAddPlannedProcedures(encidList As String[]) As String[]

  Dim asx As New String[0]
  Dim encid As String

  With asx
    .Add("Planned Procedures")
    For Each encid In encidList
      .Add(modPatReports.GetPatProcedureList(encid, "Procedures", "Planned").Join(gb.NewLine))
    Next
  End With
  Return asx

End

Private Function MultiAddMinorProcedures(encidList As String[]) As String[]

  Dim asx As New String[0]
  Dim encid As String

  With asx
    .Add("Minor Procedures")
    For Each encid In encidList
      .Add(modPatReports.GetPatProcedureList(encid, "Minor Procedures", "Done").Join(gb.NewLine))
    Next
  End With
  Return asx

End

Private Function MultiAddExtraProcedures(encidList As String[]) As String[]

  Dim asx As New String[0]
  Dim encid As String

  With asx
    .Add("Extra Procedures")
    For Each encid In encidList
      .Add(modPatReports.GetPatExtProcedureList(encid, "Planned").Join(gb.NewLine))
    Next
  End With
  Return asx

End

Private Function MultiAddMedicationUsed(encidList As String[]) As String[]

  Dim asx As New String[0]
  Dim encid As String

  With asx
    .Add("Medication Used")
    For Each encid In encidList
      .Add(modPharmacy.NurDosingString(encid))
    Next
  End With
  Return asx

End

Private Function MultiAddTreatmentAdvised(encidList As String[]) As String[]

  Dim asx As New String[0]
  Dim encid As String

  With asx
    .Add("Treatment Advised")
    For Each encid In encidList
      .Add(modPatReports.OPDMedString(encid, "Medicines"))
    Next
  End With
  Return asx

End

Private Function MultiAddConditionAtDischarge(encidList As String[]) As String[]

  Dim asx As New String[0]
  Dim encid As String

  With asx
    .Add("Condition at Discharge")
    For Each encid In encidList
      .Add(modPatReports.GetPatientNoteReport(encid, "Condition of Discharge"))
    Next
  End With
  Return asx

End

Private Function MultiAddDischargeMedication(encidList As String[]) As String[]

  Dim asx As New String[0]
  Dim encid As String

  With asx
    .Add("Discharge Medication")
    For Each encid In encidList
      .Add(modPatReports.DischargeMedString(encid))
    Next
  End With
  Return asx

End

Private Function MultiAddAdviceDischarge(encidList As String[]) As String[]

  Dim asx As New String[0]
  Dim encid As String

  With asx
    .Add("Advice on Discharge")
    For Each encid In encidList
      .Add(modPatReports.GetPatientNoteReport(encid, "Advice on Discharge"))
    Next
  End With
  Return asx

End

''opd
Private Function MultiAddOPDAdvice(encidList As String[]) As String[]

  Dim asx As New String[0]
  Dim encid As String

  With asx
    .Add("OPD Advice")
    For Each encid In encidList
      .Add(modPatReports.GetPatientNoteReport(encid, "Initial Planning"))
    Next
  End With
  Return asx

End

Private Function MultiAddExpertAdvice(encidList As String[]) As String[]

  Dim asx As New String[0]
  Dim encid As String

  With asx
    .Add("Expert Advice")
    For Each encid In encidList
      .Add(modPatReports.GetPatientNoteReport(encid, "Final Planning"))
    Next
  End With
  Return asx

End

Private Function MultiAddDeliveryProfile(encidList As String[]) As String[]

  Dim asx As New String[0]
  Dim encid As String

  With asx
    .Add("Delivery Profile")
    For Each encid In encidList
      .Add(modPatReports.DeliveryReportbyMother(encid).Join(gb.NewLine))
    Next
  End With
  Return asx

End

Private Function MultiAddClinicalNotes(encidList As String[]) As String[]

  Dim asx As New String[0]
  Dim encid As String

  With asx
    .Add("Clinical Notes")
    For Each encid In encidList
      .Add(modPatReports.GetClinNotesReport(encid).Join(gb.NewLine))
    Next
  End With
  Return asx

End

Private Function MultiAddTherapeuticPlanning(encidList As String[]) As String[]

  Dim asx As New String[0]
  Dim encid As String

  With asx
    .Add("Therapeutic Planning")
    For Each encid In encidList
      .Add(modPatReports.GetPatientPlanningReport(encid).Join(gb.NewLine))
    Next
  End With
  Return asx

End

Private Function MultiAddIPMonitoring(encidList As String[]) As String[]

  Dim asx As New String[0]
  Dim encid As String

  With asx
    .Add("IP Monitoring")
    For Each encid In encidList
      .Add(modPatReports.GetPatientMonitorReport(encid).Join(gb.NewLine))
    Next
  End With
  Return asx

End

Private Function MultiAddSelectedTest(encidList As String[], testList As String[], sUnit As String) As String[]

  Dim asx As New String[0]
  Dim encid As String

  With asx
    .Add("Laboratory")
    For Each encid In encidList
      .Add(modPatReports.GetlaboratoryHTMLProfile(encid, testList, sUnit))
    Next
  End With
  Return asx

End

Private Function MultiAddSelectedRadio(encidList As String[], testList As String[]) As String[]

  Dim asx As New String[0]
  Dim encid As String

  With asx
    .Add("Radio Diagnostics")
    For Each encid In encidList
      .Add(modPatReports.GetRadiologyHTMLProfile(encid, testList))
    Next
  End With
  Return asx

End

''----------------------------- Report -------------------------------------
Public Function MultiShowCompleteReport(xList As String[], encidList As String[], lablist As String[], radiolist As String[], strUnit As String) As String

  Dim $BillingReport As CReportHTML
  Dim xTitle As String[]

  Dim res1 As Result
  Dim res2 As Result

  xTitle = New String[]
  xTitle.Add("Category")
  xTitle.Insert(encidList)
  $BillingReport = New CReportHTML(xTitle, "", "")
  $BillingReport.UserData.Add("COMPARISON : SELECTED PARAMETERS", "PARAM1")
  $BillingReport.UserData.Add(modReportVar.GetDateTimeReport(Now(), gb.GeneralDate), "PARAM2")

  $BillingReport.Add(MultiGeneralProfile(encidList))

  $BillingReport.AddSection("General", True)
  If xList Then

    If xList.Exist("Course of Treatment") Then
      $BillingReport.Add(MultiAddCourseOfTreatment(encidList))
    Endif
    If xList.Exist("Bed Transitions") Then
      $BillingReport.Add(MultiAddBedTransition(encidList))
    Endif
    If xList.Exist("Demographics") Then
      $BillingReport.Add(MultiAddPatDemographics(encidList))
    Endif
    If xList.Exist("Triage Examinations") Then
      $BillingReport.Add(MultiAddTriageFindings(encidList))
    Endif
    If xList.Exist("Cause of Admission") Then
      $BillingReport.Add(MultiAddCauseofAdmission(encidList))
    Endif
    If xList.Exist("Chief Complaints") Then
      $BillingReport.Add(MultiAddChiefComplaints(encidList))
    Endif
    If xList.Exist("Presenting Complaints") Then
      $BillingReport.Add(MultiAddPresentingComplaints(encidList))
    Endif
    If xList.Exist("General Complaints") Then
      $BillingReport.Add(MultiAddGenComplaints(encidList))
    Endif
    If xList.Exist("Physician Examinations") Then
      $BillingReport.Add(MultiAddPhysicianFindings(encidList))
    Endif
    If xList.Exist("History of Illness") Then
      $BillingReport.Add(MultiAddHistoryOfIllness(encidList))
    Endif

    res1 = modDatabase.$myConn.Exec("select distinct(flditem) as flditem from tblhistory")
    If res1.Available Then
      For Each res1
        If xList.Exist("History@" & res1["flditem"]) Then
          $BillingReport.Add(MultiAddSelectedHistory(encidList, res1["flditem"]))
        Endif
      Next
    Endif
    If xList.Exist("Past History") Then
      $BillingReport.Add(MultiAddPastHistory(encidList))
    Endif
    If xList.Exist("Treatment History") Then
      $BillingReport.Add(MultiAddTreatmentHistory(encidList))
    Endif
    If xList.Exist("Medication History") Then
      $BillingReport.Add(MultiAddMedicatHistory(encidList))
    Endif
    If xList.Exist("Family History") Then
      $BillingReport.Add(MultiAddFamilyHistory(encidList))
    Endif
    If xList.Exist("Personal History") Then
      $BillingReport.Add(MultiAddPersonalHistory(encidList))
    Endif
    If xList.Exist("Surgical History") Then
      $BillingReport.Add(MultiAddSurgicalHistory(encidList))
    Endif
    If xList.Exist("Occupational History") Then
      $BillingReport.Add(MultiAddOccupationalHistory(encidList))
    Endif
    If xList.Exist("Social History") Then
      $BillingReport.Add(MultiAddSocialHistory(encidList))
    Endif
    If xList.Exist("Drug Allergy") Then
      $BillingReport.Add(MultiAddDrugAllergy(encidList))
    Endif
    If xList.Exist("Provisional Diagnosis") Then
      $BillingReport.Add(MultiAddProvisionalDiagnosis(encidList))
    Endif
    If xList.Exist("Initial Planning") Then
      $BillingReport.Add(MultiAddOPDAdvice(encidList))
    Endif
    If xList.Exist("Final Planning") Then
      $BillingReport.Add(MultiAddExpertAdvice(encidList))
    Endif

    If xList.Exist("Final Diagnosis") Then
      $BillingReport.Add(MultiAddFinalDiagnosis(encidList))
    Endif
    If xList.Exist("Prominent Symptoms") Then
      $BillingReport.Add(MultiAddProminientSymptoms(encidList))
    Endif
    If xList.Exist("Major Procedures") Then
      $BillingReport.Add(MultiAddMajorProcedures(encidList))
    Endif
    If xList.Exist("Minor Procedures") Then
      $BillingReport.Add(MultiAddMinorProcedures(encidList))
    Endif
    If xList.Exist("Consultations") Then
      $BillingReport.Add(MultiAddConsultationAll(encidList))
    Endif
    If xList.Exist("Equipments Used") Then
      $BillingReport.Add(MultiAddEquipmentsUsed(encidList))
    Endif
    If xList.Exist("Event Timings") Then
      $BillingReport.Add(MultiAddEventProfile(encidList))
    Endif
    If xList.Exist("Devices Used") Then
      $BillingReport.Add(MultiAddDevicesUsed(encidList))
    Endif
    If xList.Exist("Extra Procedures") Then
      $BillingReport.Add(MultiAddExtraProcedures(encidList))
    Endif
    If xList.Exist("Medication Used") Then
      $BillingReport.Add(MultiAddMedicationUsed(encidList))
    Endif
    If xList.Exist("Treatment Advised") Then
      $BillingReport.Add(MultiAddTreatmentAdvised(encidList))
    Endif

    If xList.Exist("Delivery Profile") Then
      $BillingReport.Add(MultiAddDeliveryProfile(encidList))
    Endif

    $BillingReport.AddSection("Investigations", True)
    If xList.Exist("Essential Examinations") Then
      $BillingReport.Add(MultiAddEssentialFindings(encidList))
    Endif
    If xList.Exist("Clinical Findings") Then
      $BillingReport.Add(MultiAddClinFindingsAll(encidList))
    Endif
    If xList.Exist("Nursing Examinations") Then
      $BillingReport.Add(MultiAddNursingFindings(encidList))
    Endif
    If xList.Exist("Physician Structured") Then
      $BillingReport.Add(MultiAddPhysicianStructured(encidList))
    Endif
    If xList.Exist("Department Structured") Then
      $BillingReport.Add(MultiAddDepartmentStructured(encidList))
    Endif
    If xList.Exist("Laboratory Tests") Then
      $BillingReport.Add(MultiAddSelectedTest(encidList, lablist, strUnit))
    Endif
    If xList.Exist("Radiological Findings") Then
      $BillingReport.Add(MultiAddSelectedRadio(encidList, radiolist))
    Endif

    If xList.Exist("Clinical Notes") Then
      $BillingReport.Add(MultiAddClinicalNotes(encidList))
    Endif
    If xList.Exist("IP Monitoring") Then
      $BillingReport.Add(MultiAddIPMonitoring(encidList))
    Endif
    If xList.Exist("Therapeutic Planning") Then
      $BillingReport.Add(MultiAddTherapeuticPlanning(encidList))
    Endif

    $BillingReport.AddSection("Discharge", True)
    If xList.Exist("Planned Procedures") Then
      $BillingReport.Add(MultiAddPlannedProcedures(encidList))
    Endif
    If xList.Exist("Discharge Examinations") Then
      $BillingReport.Add(MultiAddDischargeFindings(encidList))
    Endif
    If xList.Exist("Discharge Medication") Then
      $BillingReport.Add(MultiAddDischargeMedication(encidList))
    Endif
    If xList.Exist("Condition at Discharge") Then
      $BillingReport.Add(MultiAddConditionAtDischarge(encidList))
    Endif
    If xList.Exist("Advice on Discharge") Then
      $BillingReport.Add(MultiAddAdviceDischarge(encidList))
    Endif

    res2 = modDatabase.$myConn.Exec("select distinct(flditem) as flditem from tbldischarge")
    If res2.Available Then
      For Each res2
        If xList.Exist("Discharge@" & res2["flditem"]) Then
          $BillingReport.Add(MultiAddSelectedDischarge(encidList, res2["flditem"]))
        Endif
      Next
    Endif

  Endif

  Return $BillingReport.NewHTMLPath()

End
